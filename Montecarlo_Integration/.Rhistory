c(n,est,CI[1],CI[2])
})
View(result)
# Autor: Rodrigo Murillo
# Clave única: 110183
#
# Programa para resolver una integral definida usando simulación de uniformes y Montecarlo.
#
# In:
#     [a, b]: intervalo de integración
#     g: función a integrar
#     alpha: confianza de los intervalos
#
#-------------------------------------------
a = 0
b = 1
g = function(x) (log(1/x))^3 - factorial(3)
alpha = 0.05
n_sim = 10
#-------------------------------------------
cont = 1
result = as.data.frame(matrix(nrow = n_sim, ncol = 4))
names(result) = c("Simulaciones","Estimacion","IC_Inferior","IC_Superior")
result = replicate(n_sim, {
n = cont * 10
g_x = g (runif(n, min=a, max=b))
est = mean(g ( runif(n, min=a, max=b) ))
CI = est + c(-1,1)*qnorm(1-alpha/2)*sqrt(var(g_x)/n)
#result[cont,] = c(n,est,CI[1],CI[2])
cont = cont+1
t(c(n,est,CI[1],CI[2]))
})
result
# Autor: Rodrigo Murillo
# Clave única: 110183
#
# Programa para resolver una integral definida usando simulación de uniformes y Montecarlo.
#
# In:
#     [a, b]: intervalo de integración
#     g: función a integrar
#     alpha: confianza de los intervalos
#
#-------------------------------------------
a = 0
b = 1
g = function(x) (log(1/x))^3 - factorial(3)
alpha = 0.05
n_sim = 10
#-------------------------------------------
cont = 1
result = replicate(n_sim, {
n = cont * 10
g_x = g (runif(n, min=a, max=b))
est = mean(g ( runif(n, min=a, max=b) ))
CI = est + c(-1,1)*qnorm(1-alpha/2)*sqrt(var(g_x)/n)
#result[cont,] = c(n,est,CI[1],CI[2])
cont = cont+1
t(c(n,est,CI[1],CI[2]))
})
result = as.data.frame(result)
names(result) = c("Simulaciones","Estimacion","IC_Inferior","IC_Superior")
View(result)
result = replicate(n_sim, {
n = cont * 10
g_x = g (runif(n, min=a, max=b))
est = mean(g ( runif(n, min=a, max=b) ))
CI = est + c(-1,1)*qnorm(1-alpha/2)*sqrt(var(g_x)/n)
#result[cont,] = c(n,est,CI[1],CI[2])
cont = cont+1
t(c(n,est,CI[1],CI[2]))
})
t(c(n,est,CI[1],CI[2]))
result = replicate(n_sim, {
n = cont * 10
g_x = g (runif(n, min=a, max=b))
est = mean(g ( runif(n, min=a, max=b) ))
CI = est + c(-1,1)*qnorm(1-alpha/2)*sqrt(var(g_x)/n)
#result[cont,] = c(n,est,CI[1],CI[2])
cont = cont+1
(c(n,est,CI[1],CI[2]))
})
result = as.data.frame(t(result))
View(result)
names(result) = c("Simulaciones","Estimacion","IC_Inferior","IC_Superior")
View(result)
library(ggplot2)
ggplot(result, aes(Simulaciones,Estimacion))
View(result)
ggplot(result, aes(Simulaciones,Estimacion)) +
geom_smooth()
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
geom_line(aes(y = Estimación))
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
geom_line(aes(y = Estimacion))
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
geom_line(aes(y = Estimacion)) +
geom_smooth()
randu()
# Autor: Rodrigo Murillo
# Clave única: 110183
#
# Programa para resolver una integral definida usando simulación de uniformes y Montecarlo.
#
# In:
#     [a, b]: intervalo de integración
#     g: función a integrar
#     alpha: confianza de los intervalos
#
#-------------------------------------------
a = 0
b = 1
g = function(x) (log(1/x))^3 - factorial(3)
alpha = 0.05
n_sim = 10
#-------------------------------------------
library(ggplot2)
cont = 1
result = replicate(n_sim, {
#n = cont * 10
n = floor(runif(10, 10e4))
g_x = g (runif(n, min=a, max=b))
est = mean(g ( runif(n, min=a, max=b) ))
CI = est + c(-1,1)*qnorm(1-alpha/2)*sqrt(var(g_x)/n)
#result[cont,] = c(n,est,CI[1],CI[2])
cont = cont+1
(c(n,est,CI[1],CI[2]))
})
result = as.data.frame(t(result))
names(result) = c("Simulaciones","Estimacion","IC_Inferior","IC_Superior")
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
geom_line(aes(y = Estimacion)) +
geom_smooth()
View(result)
floor(runif(10, 10e4))
n = floor(runif(1 ,10, 10e3))
result = replicate(n_sim, {
#n = cont * 10
n = floor(runif(1 ,10, 10e3))
g_x = g (runif(n, min=a, max=b))
est = mean(g ( runif(n, min=a, max=b) ))
CI = est + c(-1,1)*qnorm(1-alpha/2)*sqrt(var(g_x)/n)
#result[cont,] = c(n,est,CI[1],CI[2])
cont = cont+1
(c(n,est,CI[1],CI[2]))
})
result = as.data.frame(t(result))
names(result) = c("Simulaciones","Estimacion","IC_Inferior","IC_Superior")
View(result)
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
geom_line(aes(y = Estimacion))
result = replicate(n_sim, {
#n = cont * 10
n = floor(runif(1 ,100, 10e3))
g_x = g (runif(n, min=a, max=b))
est = mean(g ( runif(n, min=a, max=b) ))
CI = est + c(-1,1)*qnorm(1-alpha/2)*sqrt(var(g_x)/n)
#result[cont,] = c(n,est,CI[1],CI[2])
cont = cont+1
(c(n,est,CI[1],CI[2]))
})
result = as.data.frame(t(result))
names(result) = c("Simulaciones","Estimacion","IC_Inferior","IC_Superior")
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
geom_line(aes(y = Estimacion))
View(result)
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
geom_line(aes(y = Estimacion)) +
geom_smooth(aes(ymin = IC_Inferior, ymax = IC_Superior) )
result = replicate(n_sim, {
#n = cont * 10
n = floor(runif(1 ,100, 10e3))
g_x = g (runif(n, min=a, max=b))
est = mean(g_x)
CI = est + c(-1,1)*qnorm(1-alpha/2)*sqrt(var(g_x)/n)
#result[cont,] = c(n,est,CI[1],CI[2])
cont = cont+1
(c(n,est,CI[1],CI[2]))
})
result = as.data.frame(t(result))
names(result) = c("Simulaciones","Estimacion","IC_Inferior","IC_Superior")
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
geom_line(aes(y = Estimacion)) +
geom_smooth(aes(ymin = IC_Inferior, ymax = IC_Superior) )
n_sim = 100
result = replicate(n_sim, {
#n = cont * 10
n = floor(runif(1 ,10, 10e4))
g_x = g (runif(n, min=a, max=b))
est = mean(g_x)
CI = est + c(-1,1)*qnorm(1-alpha/2)*sqrt(var(g_x)/n)
#result[cont,] = c(n,est,CI[1],CI[2])
cont = cont+1
(c(n,est,CI[1],CI[2]))
})
result = as.data.frame(t(result))
names(result) = c("Simulaciones","Estimacion","IC_Inferior","IC_Superior")
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
geom_line(aes(y = Estimacion)) +
geom_smooth(aes(ymin = IC_Inferior, ymax = IC_Superior) )
View(result)
check = result$Estimacion < result$IC_Inferior | result$Estimacion > result$IC_Superior
summary(check)
summary(result)
# Autor: Rodrigo Murillo
# Clave única: 110183
#
# Programa para resolver una integral definida usando simulación de uniformes y Montecarlo.
#
# In:
#     [a, b]: intervalo de integración
#     g: función a integrar
#     alpha: confianza de los intervalos
#
#-------------------------------------------
a = 0
b = 1
g = function(x) (log(1/x))^3 - factorial(3)
alpha = 0.05
n_sim = 100
#-------------------------------------------
library(ggplot2)
cont = 1
result = replicate(n_sim, {
#n = cont * 10
n = floor(runif(1 ,1, 10e3))
g_x = g (runif(n, min=a, max=b))
est = mean(g_x)
CI = est + c(-1,1)*qnorm(1-alpha/2)*sqrt(var(g_x)/n)
#result[cont,] = c(n,est,CI[1],CI[2])
cont = cont+1
(c(n,est,CI[1],CI[2]))
})
result = as.data.frame(t(result))
names(result) = c("Simulaciones","Estimacion","IC_Inferior","IC_Superior")
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
geom_line(aes(y = Estimacion)) +
geom_smooth(aes(ymin = IC_Inferior, ymax = IC_Superior) )
summary(result)
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
geom_line(aes(y = Estimacion)) +
geom_smooth(aes(ymin = IC_Inferior, ymax = IC_Superior), stat = "identity")
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
geom_line(aes(y = Estimacion)) +
geom_smooth(aes(y=Estimacion, ymin = IC_Inferior, ymax = IC_Superior), stat = "identity")
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
geom_line(aes(y = Estimacion)) +
geom_smooth(aes(y=Estimacion, ymin = IC_Inferior, ymax = IC_Superior))
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
geom_line(aes(y = Estimacion)) +
geom_ribbon(aes(ymin = IC_Inferior, ymax = IC_Superior)))
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
geom_line(aes(y = Estimacion)) +
geom_ribbon(aes(ymin = IC_Inferior, ymax = IC_Superior))
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
geom_line(aes(y = Estimacion), colour = "blue") +
geom_ribbon(aes(ymin = IC_Inferior, ymax = IC
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
geom_line(aes(y = Estimacion), colour = "blue") +
geom_ribbon(aes(ymin = IC_Inferior, ymax = IC_Superior))
#geom_smooth(aes(y=Estimacion, ymin = IC_Inferior
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
geom_line(aes(y = Estimacion), colour = "blue") +
geom_ribbon(aes(ymin = IC_Inferior, ymax = IC_Superior), alpha = 0.2)
#geom_smooth(aes(y=Estimacion, ymin = IC_Inferior, ymax = IC_Superio
# Autor: Rodrigo Murillo
# Clave única: 110183
#
# Programa para resolver una integral definida usando simulación de uniformes y Montecarlo.
#
# In:
#     [a, b]: intervalo de integración
#     g: función a integrar
#     alpha: confianza de los intervalos
#
#-------------------------------------------
a = 0
b = 1
g = function(x) (log(1/x))^3 - factorial(3)
alpha = 0.05
n_sim = 100
#-------------------------------------------
library(ggplot2)
cont = 1
result = replicate(n_sim, {
#n = cont * 10
n = floor(runif(1 ,1, 10e4))
g_x = g (runif(n, min=a, max=b))
est = mean(g_x)
CI = est + c(-1,1)*qnorm(1-alpha/2)*sqrt(var(g_x)/n)
#result[cont,] = c(n,est,CI[1],CI[2])
cont = cont+1
(c(n,est,CI[1],CI[2]))
})
result = as.data.frame(t(result))
names(result) = c("Simulaciones","Estimacion","IC_Inferior","IC_Superior")
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
geom_line(aes(y = Estimacion), colour = "blue") +
geom_ribbon(aes(ymin = IC_Inferior, ymax = IC_Superior), alpha = 0.2)
#geom_smooth(aes(y=Estimacion, ymin = IC_Inferior, ymax = IC_Superior), stat = "identity")
# Autor: Rodrigo Murillo
# Clave única: 110183
#
# Programa para resolver una integral definida usando simulación de uniformes y Montecarlo.
#
# In:
#     [a, b]: intervalo de integración
#     g: función a integrar
#     alpha: confianza de los intervalos
#
#-------------------------------------------
a = 0
b = 1
g = function(x) (log(1/x))^3 - factorial(3)
alpha = 0.05
n_sim = 1000
#-------------------------------------------
library(ggplot2)
cont = 1
result = replicate(n_sim, {
#n = cont * 10
n = floor(runif(1 ,1, 10e4))
g_x = g (runif(n, min=a, max=b))
est = mean(g_x)
CI = est + c(-1,1)*qnorm(1-alpha/2)*sqrt(var(g_x)/n)
#result[cont,] = c(n,est,CI[1],CI[2])
cont = cont+1
(c(n,est,CI[1],CI[2]))
})
result = as.data.frame(t(result))
names(result) = c("Simulaciones","Estimacion","IC_Inferior","IC_Superior")
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
geom_line(aes(y = Estimacion), colour = "blue") +
geom_ribbon(aes(ymin = IC_Inferior, ymax = IC_Superior), alpha = 0.2)
#geom_smooth(aes(y=Estimacion, ymin = IC_Inferior, ymax = IC_Superior), stat = "identity")
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
ggtitle(paste("Estimación Montecarlo con Intervalos de Confianza al:",1-alpha*100)
geom_line(aes(y = Estimacion), colour = "blue") +
geom_ribbon(aes(ymin = IC_Inferior, ymax = IC_Superior), alpha = 0.2)
#geom_smooth(aes(y=Estimacion, ymin = IC_Inferior, ymax = IC_Superio
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
ggtitle(paste("Estimación Montecarlo con Intervalos de Confianza al:",1-alpha*100))
geom_line(aes(y = Estimacion), colour = "blue") +
geom_ribbon(aes(ymin = IC_Inferior, ymax = IC_Superior), alpha = 0.2)
#geom_smooth(aes(y=Estimacion, ymin = IC_Inferior, ymax = IC_Superior), stat = "identity")
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
ggtitle(paste("Estimación Montecarlo con Intervalos de Confianza al:",1-alpha*100)) +
geom_line(aes(y = Estimacion), colour = "blue") +
geom_ribbon(aes(ymin = IC_Inferior, ymax = IC_Superior), alpha = 0.2)
#geom_smooth(aes(y=Estimacion, ymin = IC_Inferior, ymax = IC_Superior), stat = "identity")
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
ggtitle(paste("Estimación Montecarlo con Intervalos de Confianza al:",(1-alpha)*100)) +
geom_line(aes(y = Estimacion), colour = "blue") +
geom_ribbon(aes(ymin = IC_Inferior, ymax = IC_Superior), alpha = 0.2)
#geom_smooth(aes(y=Estimacion, ymin = IC_Inferior, ymax = IC_Superior), stat = "identity")
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
ggtitle(paste("Estimación Montecarlo con Intervalos al: ",(1-alpha)*100),"% de confianza",sep"") +
geom_line(aes(y = Estimacion), colour = "blue") +
geom_ribbon(aes(ymin = IC_Inferior, ymax = IC_Superior), alpha = 0.2)
#geom_smooth(aes(y=Estimacion, ymin = IC_Inferior, ymax = IC_Superior), stat = "identity")
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
ggtitle(paste("Estimación Montecarlo con Intervalos al: ",(1-alpha)*100),"% de confianza",sep="") +
geom_line(aes(y = Estimacion), colour = "blue") +
geom_ribbon(aes(ymin = IC_Inferior, ymax = IC_Superior), alpha = 0.2)
#geom_smooth(aes(y=Estimacion, ymin = IC_Inferior
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
ggtitle(paste("Estimación Montecarlo con Intervalos al: ",(1-alpha)*100,"% de confianza", sep="")) +
geom_line(aes(y = Estimacion), colour = "blue") +
geom_ribbon(aes(ymin = IC_Inferior, ymax = IC_Superior), alpha = 0.2)
#geom_smooth(aes(y=Estimacion,
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
ggtitle(paste("Estimación Montecarlo con Intervalos al ",(1-alpha)*100,"% de confianza", sep="")) +
geom_line(aes(y = Estimacion), colour = "blue") +
geom_ribbon(aes(ymin = IC_Inferior, ymax = IC_Superior), alpha = 0.2)
#geom_smooth(aes(y=Estimacion, ymin = IC_Inferior, ymax = IC_Superior), stat = "identity")
ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
ggtitle(paste("Estimación Montecarlo con Intervalos al ",(1-alpha)*100,"% de confianza", sep="")) +
geom_line(aes(y = Estimacion), colour = "blue") +
geom_ribbon(aes(ymin = IC_Inferior, ymax = IC_Superior), alpha = 0.4)
#geom_smooth(aes(y=Estimacion, ymin = IC_Inferior, ymax = IC_Superio
shiny::runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
# Autor: Rodrigo Murillo
# Clave única: 110183
#
# Programa para resolver una integral definida usando simulación de uniformes y Montecarlo.
#
# In:
#     [a, b]: intervalo de integración
#     g: función a integrar
#     alpha: confianza de los intervalos
#
#-------------------------------------------
a = 0
b = 1
g = function(x) (log(1/x))^3 - factorial(3)
alpha = 0.05
n_sim = 1000
#-------------------------------------------
library(ggplot2)
cont = 1
result = replicate(n_sim, {
#n = cont * 10
n = floor(runif(1 ,1, 10e4))
g_x = g (runif(n, min=a, max=b))
est = mean(g_x)
CI = est + c(-1,1)*qnorm(1-alpha/2)*sqrt(var(g_x)/n)
#result[cont,] = c(n,est,CI[1],CI[2])
cont = cont+1
(c(n,est,CI[1],CI[2]))
})
result = as.data.frame(t(result))
names(result) = c("Simulaciones","Estimacion","IC_Inferior","IC_Superior")
p1 = ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
ggtitle(paste("Estimación Montecarlo con Intervalos al ",(1-alpha)*100,"% de confianza", sep="")) +
geom_line(aes(y = Estimacion), colour = "blue") +
geom_ribbon(aes(ymin = IC_Inferior, ymax = IC_Superior), alpha = 0.4)
#geom_smooth(aes(y=Estimacion, ymin = IC_Inferior, ymax = IC_Superior), stat = "identity")
p1
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
# hist(x, breaks = bins, col = 'darkgray', border = 'white')
# Autor: Rodrigo Murillo
# Clave única: 110183
#
# Programa para resolver una integral definida usando simulación de uniformes y Montecarlo.
#
# In:
#     [a, b]: intervalo de integración
#     g: función a integrar
#     alpha: confianza de los intervalos
#
#-------------------------------------------
a = 0
b = 1
g = function(x) (log(1/x))^3 - factorial(3)
alpha = 0.05
n_sim = 100
#-------------------------------------------
library(ggplot2)
cont = 1
result = replicate(n_sim, {
#n = cont * 10
n = floor(runif(1 ,1, 10e4))
g_x = g (runif(n, min=a, max=b))
est = mean(g_x)
CI = est + c(-1,1)*qnorm(1-alpha/2)*sqrt(var(g_x)/n)
#result[cont,] = c(n,est,CI[1],CI[2])
cont = cont+1
(c(n,est,CI[1],CI[2]))
})
result = as.data.frame(t(result))
names(result) = c("Simulaciones","Estimacion","IC_Inferior","IC_Superior")
p1 = ggplot(result, aes(x=Simulaciones,y=Estimacion)) +
ggtitle(paste("Estimación Montecarlo con Intervalos al ",(1-alpha)*100,"% de confianza", sep="")) +
geom_line(aes(y = Estimacion), colour = "blue") +
geom_ribbon(aes(ymin = IC_Inferior, ymax = IC_Superior), alpha = 0.4)
p1
})
})
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
View(g)
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Downloads')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
runApp('Montecarlo_Integration')
